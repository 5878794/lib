{"version":3,"sources":["bind_data.es6"],"names":[],"mappings":"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","file":"bind_data-compiled.js","sourcesContent":["\n\n\n//TODO 只写了模板赋值单向绑定 双向绑定需要检查this.data对象的key\n//TODO 模板初始显示的{{}}隐藏问题\n//\n\n\n//数据绑定函数\n//可以绑定数据列表,每次修改data对象中的lists数组在传入即可\n\n//关于列表\n//传入的数组长度小于上一次的会重新生成列表\n//列表长度不变，修改其中内容不会更新\n//大于之前的列表长度会自动添加\n\n\n\n//html部分\n//<div class=\"aa\" data-dd=\"123\" id=\"{{$a}}\" tt=\"{{$b}}\">123\n//    <span id=\"{{$cc}}\">{{$a}}</span>\n//<div id=\"{{$aa}}\">3,{{$aa+33}}</div>\n//<div data-repeat=\"for item in lists\">\n//    <p>{{$item.cc}}</p>\n//</div>\n//</div>\n\n\n//js部分\n//var data = {\n//    a:1,\n//    b:2,\n//    cc:3,\n//    aa:11,\n//    lists:[\n//        {cc:1},\n//        {cc:2},\n//        {cc:3},\n//        {cc:4}\n//    ]\n//};\n//\n\n//初始执行\n//var c = new DEVICE.bindData($(\".aa\"),data);\n\n//更新数据执行(2次传入的数据格式要一样)\n//c.bindData(data);\n\n\n\nDEVICE.bindData = class bindData{\n    constructor(dom,data){\n        this.dom = dom;\n        this.data = data;\n\n        this.mark = {};\n        this.repeatMark = {};\n\n        this._init();\n    }\n\n    _init(){\n        this._getMark(this.dom.get(0));\n        this.bindData(this.data);\n\n    }\n\n    bindData(data){\n        data = JSON.parse(JSON.stringify(data));\n        this._setVal(data);\n        this._setListVal(data);\n\n        // console.log(this.mark)\n        // console.log(this.repeatMark)\n    }\n\n\n    //解析模板\n    _getMark(dom){\n        //处理元素的attr\n        let attr = dom.attributes || [];\n        for(var i=0,l=attr.length;i<l;i++){\n            let attr_name = attr[i].name,\n                attr_value = attr[i].value,\n                attr_mark = this._getAllMark(attr_value);\n\n            if(attr_mark.length != 0 ){\n                this._saveMark(attr_mark,attr_name,attr_value,dom,\"attr\")\n            }\n        }\n\n\n        //判断是否是循环模块\n        if(dom.dataset && dom.dataset.repeat){\n            this._saveRepeatList(dom);\n            return;\n        }\n\n\n        //处理元素的text\n        let text = dom.nodeValue,\n            text_mark = this._getAllMark(text);\n\n        if(text_mark.length != 0 ){\n            this._saveMark(text_mark,\"\",text,dom,\"text\")\n        }\n\n\n\n        //处理子元素\n        let children = dom.childNodes;\n        for(var z=0,zl=children.length;z<zl;z++){\n            if(children[z].nodeType == 1 || children[z].nodeType == 3 ){\n                this._getMark(children[z])\n            }\n        }\n    }\n\n    //读取模板中的{{}}中的变量\n    _getAllMark(value){\n        if(value === null){return []}\n\n        if(value.indexOf(\"{{\")>-1 && value.indexOf(\"}}\")>-1){\n            return value.match(/\\$\\w+/ig) || [];\n        }else{\n            return [];\n        }\n    }\n\n    //保存模板中的{{}}中的变量\n    _saveMark(array,attr_name,attr_value,dom,type){\n        for(var i =0 , l = array.length; i<l; i++){\n            let key = array[i];\n            key = key.substr(1,key.length-1);\n\n            if(!this.mark[key]){\n                this.mark[key] = {\n                    value:\"\",\n                    items:[]\n                };\n            }\n\n            this.mark[key].items.push({\n                dom:dom,\n                type:type,\n                attrName:attr_name,\n                value:attr_value\n            })\n\n        }\n    }\n\n    //赋值\n    _setVal(data){\n        for(var key in this.mark){\n            if(this.mark.hasOwnProperty(key)){\n                let value = data[key] || \"\",\n                    obj = this.mark[key];\n\n                if(obj.value != value){\n                    obj.value = value;\n                    let doms = obj.items;\n                    for(var i=0,l=doms.length;i<l;i++){\n                        let this_data = doms[i],\n                            this_dom = this_data.dom,\n                            this_attrName = this_data.attrName,\n                            oldStr = this_data.value,\n                            newStr = this._getNewStr(oldStr,data);\n\n                        if(this_data.type==\"attr\"){\n                            this_dom.setAttribute(this_attrName,newStr);\n                        }else{\n                            this_dom.nodeValue = newStr;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    //模板字符串转换为实际的字符串\n    _getNewStr(str,data){\n        str = str.replace(/\\{\\{[a-z_\\$\\(][a-z0-9_\\.\\s\\[\\]\\+\\-\\*\\/\\%\\$\\(\\)]*\\}\\}/ig,function(a){\n            a = a.substr(2,a.length-4);\n            a = a.replace(/\\$/g,\"data.\");\n            a = eval(a);\n            return a;\n        });\n\n        return str;\n    }\n\n\n    //处理循环部分并缓存\n    _saveRepeatList(dom){\n        //获取设置的对象和key\n        let text = dom.dataset.repeat;\n        text = text.split(\" \");\n\n        let data_key = text[3],\n            set_key = text[1];\n\n        if(!data_key || !set_key){return;}\n\n\n        //存储\n\n        if(!this.repeatMark[data_key]){\n            this.repeatMark[data_key] = {\n                items:[],             //使用该数据源的dom数据列表\n                listNumber:0,        //现有列表数\n                data:[]              //现绑定的数据\n            };\n        }\n\n        this.repeatMark[data_key].items.push({\n            dom:dom,                //包裹层dom\n            list:dom.innerHTML,     //要循环的html\n            setKey:set_key          //html中设置的对象名\n        });\n\n        //清空html的模板数据\n        $(dom).html(\"\");\n\n    }\n\n\n    //循环列表类绑定\n    _setListVal(data){\n        for(var key in this.repeatMark){\n            //找到绑定数据的key\n            if(this.repeatMark.hasOwnProperty(key)){\n                let data_source = data[key] || [],\n                    data_length = data_source.length,\n                    this_item = this.repeatMark[key],\n                    items = this_item.items || [],\n                    old_number = this_item.listNumber,\n                    now_number = data_length,\n                    old_data = JSON.stringify(this_item.data),\n                    now_data = JSON.stringify(data_source);\n\n                //数据相同不处理\n                if(old_data == now_data){\n                    continue;\n                }\n\n                this.repeatMark[key].listNumber = now_number;\n                this.repeatMark[key].data = data_source;\n\n\n                //找到绑定该key的所有缓存dom\n                for(var i=0,l=items.length;i<l;i++){\n                    let _data = items[i],\n                        _body = _data.dom,\n                        _key = _data.setKey,\n                        _html = _data.list,\n                        z = 0;\n\n                    //数据源不同，但条数一样清空dom下的列表，否则按加载下一页\n                    if(old_number >= now_number){\n                        $(_body).html(\"\");\n                    }else{\n                        z = old_number;\n                    }\n\n\n                    //生成列表数据\n                    for(z,data_length;z<data_length;z++){\n                        let __data = {};\n                        __data[_key] = data_source[z];\n\n                        let this_html = this._getNewStr(_html,__data);\n                        $(_body).append(this_html);\n                    }\n\n\n                }\n\n            }\n        }\n\n\n    }\n};\n\n\n"]}