{"version":3,"sources":["bind_data.es6"],"names":[],"mappings":"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","file":"bind_data-compiled.js","sourcesContent":["\n\n\n//TODO 只写了模板赋值单向绑定 双向绑定需要检查this.data对象的key\n//TODO 模板初始显示的{{}}隐藏问题\n//\n\n\nDEVICE.bindData = class bindData{\n    constructor(dom,data){\n        this.dom = dom;\n        this.data = data;\n\n        this.mark = {};\n        this.repeatMark = {};\n\n        this._init();\n    }\n\n    _init(){\n        this._getMark(this.dom.get(0));\n        this.bindData(this.data);\n\n    }\n\n    bindData(data){\n        data = JSON.parse(JSON.stringify(data));\n        this._setVal(data);\n        this._setListVal(data);\n\n        console.log(this.mark)\n        console.log(this.repeatMark)\n    }\n\n\n    //解析模板\n    _getMark(dom){\n        //处理元素的attr\n        let attr = dom.attributes || [];\n        for(var i=0,l=attr.length;i<l;i++){\n            let attr_name = attr[i].name,\n                attr_value = attr[i].value,\n                attr_mark = this._getAllMark(attr_value);\n\n            if(attr_mark.length != 0 ){\n                this._saveMark(attr_mark,attr_name,attr_value,dom,\"attr\")\n            }\n        }\n\n\n        //判断是否是循环模块\n        if(dom.dataset && dom.dataset.repeat){\n            this._saveRepeatList(dom);\n            return;\n        }\n\n\n        //处理元素的text\n        let text = dom.nodeValue,\n            text_mark = this._getAllMark(text);\n\n        if(text_mark.length != 0 ){\n            this._saveMark(text_mark,\"\",text,dom,\"text\")\n        }\n\n\n\n        //处理子元素\n        let children = dom.childNodes;\n        for(var z=0,zl=children.length;z<zl;z++){\n            if(children[z].nodeType == 1 || children[z].nodeType == 3 ){\n                this._getMark(children[z])\n            }\n        }\n    }\n\n    //读取模板中的{{}}中的变量\n    _getAllMark(value){\n        if(value === null){return []}\n\n        if(value.indexOf(\"{{\")>-1 && value.indexOf(\"}}\")>-1){\n            return value.match(/\\$\\w+/ig) || [];\n        }else{\n            return [];\n        }\n    }\n\n    //保存模板中的{{}}中的变量\n    _saveMark(array,attr_name,attr_value,dom,type){\n        for(var i =0 , l = array.length; i<l; i++){\n            let key = array[i];\n            key = key.substr(1,key.length-1);\n\n            if(!this.mark[key]){\n                this.mark[key] = {\n                    value:\"\",\n                    items:[]\n                };\n            }\n\n            this.mark[key].items.push({\n                dom:dom,\n                type:type,\n                attrName:attr_name,\n                value:attr_value\n            })\n\n        }\n    }\n\n    //赋值\n    _setVal(data){\n        for(var key in this.mark){\n            if(this.mark.hasOwnProperty(key)){\n                let value = data[key] || \"\",\n                    obj = this.mark[key];\n\n                if(obj.value != value){\n                    obj.value = value;\n                    let doms = obj.items;\n                    for(var i=0,l=doms.length;i<l;i++){\n                        let this_data = doms[i],\n                            this_dom = this_data.dom,\n                            this_attrName = this_data.attrName,\n                            oldStr = this_data.value,\n                            newStr = this._getNewStr(oldStr,data);\n\n                        if(this_data.type==\"attr\"){\n                            this_dom.setAttribute(this_attrName,newStr);\n                        }else{\n                            this_dom.nodeValue = newStr;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    //模板字符串转换为实际的字符串\n    _getNewStr(str,data){\n        str = str.replace(/\\{\\{[a-z_\\$\\(][a-z0-9_\\.\\s\\[\\]\\+\\-\\*\\/\\%\\$\\(\\)]*\\}\\}/ig,function(a){\n            a = a.substr(2,a.length-4);\n            a = a.replace(/\\$/g,\"data.\");\n            a = eval(a);\n            return a;\n        });\n\n        return str;\n    }\n\n\n    //处理循环部分并缓存\n    _saveRepeatList(dom){\n        //获取设置的对象和key\n        let text = dom.dataset.repeat;\n        text = text.split(\" \");\n\n        let data_key = text[3],\n            set_key = text[1];\n\n        if(!data_key || !set_key){return;}\n\n\n        //存储\n\n        if(!this.repeatMark[data_key]){\n            this.repeatMark[data_key] = {\n                items:[],             //使用该数据源的dom数据列表\n                listNumber:0,        //现有列表数\n                data:[]              //现绑定的数据\n            };\n        }\n\n        this.repeatMark[data_key].items.push({\n            dom:dom,                //包裹层dom\n            list:dom.innerHTML,     //要循环的html\n            setKey:set_key          //html中设置的对象名\n        });\n\n        //清空html的模板数据\n        $(dom).html(\"\");\n\n    }\n\n\n    //循环列表类绑定\n    _setListVal(data){\n        for(var key in this.repeatMark){\n            //找到绑定数据的key\n            if(this.repeatMark.hasOwnProperty(key)){\n                let data_source = data[key] || [],\n                    data_length = data_source.length,\n                    this_item = this.repeatMark[key],\n                    items = this_item.items || [],\n                    old_number = this_item.listNumber,\n                    now_number = data_length,\n                    old_data = JSON.stringify(this_item.data),\n                    now_data = JSON.stringify(data_source);\n\n                //数据相同不处理\n                if(old_data == now_data){\n                    continue;\n                }\n\n                this.repeatMark[key].listNumber = now_number;\n                this.repeatMark[key].data = data_source;\n\n\n                //找到绑定该key的所有缓存dom\n                for(var i=0,l=items.length;i<l;i++){\n                    let _data = items[i],\n                        _body = _data.dom,\n                        _key = _data.setKey,\n                        _html = _data.list;\n\n                    //数据源不同，但条数一样清空dom下的列表，否则按加载下一页\n                    if(old_number == now_number){\n                        $(_body).html(\"\");\n                    }\n\n                    //生成列表数据\n                    for(var z=0,zl=data_length;z<zl;z++){\n                        let __data = {};\n                        __data[_key] = data_source[z];\n\n                        let this_html = this._getNewStr(_html,__data);\n                        $(_body).append(this_html);\n                    }\n\n\n                }\n\n            }\n        }\n\n\n    }\n};\n\n\n"]}